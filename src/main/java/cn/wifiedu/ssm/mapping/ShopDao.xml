<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="shop">
	<resultMap id="BaseResultMap" type="java.util.HashMap"></resultMap>
	<parameterMap id="BaseParameterMap" type="java.util.HashMap"></parameterMap>
	<!--添加到商户信息表 -->
	<insert id="insertShop" parameterMap="BaseParameterMap">
		insert into
		SC_SHOP_INFO
		(
		SHOP_ID,
		SHOP_NAME,
		SHOP_TEL,
		SHOP_TYPE,
		SHOP_AREA,
		SHOP_ADDRESS,
		SHOP_IS_CHAIN,
		SERVICETYPE_FK,
		CREATE_TIME,
		CREATE_BY
		)
		values(
		#{UUID},
		#{SHOP_NAME},
		#{SHOP_TEL},
		#{SHOP_TYPE},
		#{SHOP_AREA},
		#{SHOP_ADDRESS},
		#{SHOP_IS_CHAIN},
		#{SERVICETYPE_FK},
		NOW(),
		#{CREATE_BY}

		)
	</insert>
	<!-- 查询当前登录代理商的商铺信息 -->
	<select id="findAgentShopInfo" resultMap="BaseResultMap"
		parameterMap="BaseParameterMap">
		select u.USER_NAME,u.USER_SN,s.* from (SELECT
		su.USER_SN,su.USER_NAME,sus1.FK_SHOP from sc_user as su INNER JOIN
		sc_user_shop sus1 on su.USER_PK = sus1.FK_USER where sus1.FK_ROLE =
		(select ssr.ROLE_PK from sc_sys_role ssr where ssr.ROLE_NAME = '店长' ))
		as u RIGHT JOIN (
		select ssi.*,sst.SERVICE_TYPE from sc_shop_info ssi
		LEFT JOIN
		sc_service_type sst on ssi.SERVICETYPE_FK = sst.SERVICE_PK
		where
		ssi.SHOP_ID IN(
		SELECT sus.FK_SHOP FROM sc_user_shop as sus WHERE
		sus.FK_USER = #{USER_ID}))
		s on s.SHOP_ID = u.FK_SHOP;
	</select>

	<!-- 根据shopId查询商铺基本信息 -->
	<select id="SelectByPrimaryKey" resultMap="BaseResultMap"
		parameterMap="BaseParameterMap">
		select
		SHOP_NAME,SHOP_TEL,SHOP_TYPE,SHOP_AREA,SHOP_ADDRESS,SHOP_TEL,SHOP_IS_CHAIN from SC_SHOP_INFO
		where SHOP_ID = #{SHOP_FK};
	</select>

	<!-- 更新商铺的过期时间 -->
	<update id="UpdateOverDateAndServiceType" parameterMap="BaseParameterMap">
		update
		SC_SHOP_INFO
		set
		OVER_DATA = #{OVER_DATA},
		SERVICETYPE_FK = #{SERVICE_ID}
		where SHOP_ID = #{SHOP_FK}
	</update>

	<!-- 更新店铺基本信息操作 -->
	<update id="updateShopBaseInfoById" parameterMap="BaseParameterMap">
		UPDATE
		sc_shop_info SET SHOP_NAME = #{SHOP_NAME}, SHOP_TEL = #{SHOP_TEL},
		SHOP_TYPE = #{SHOP_TYPE}, SHOP_AREA = #{SHOP_AREA}, SHOP_ADDRESS =
		#{SHOP_ADDRESS}, UPDATE_TIME = NOW()
		UPDATE_BY = #{UPDATE_BY}
		WHERE
		SHOP_ID = #{SHOP_ID};
	</update>

	<!-- 更新商铺的认领状态 -->
	<update id="UpdateShopState" parameterMap="BaseParameterMap">
		update SC_SHOP_INFO
		set
		SHOP_STATE = #{SHOP_STATE}
		where SHOP_ID = #{SHOP_FK}
	</update>

	<!-- 查询 用户是否已经关联该店铺 -->
	<select id="checkUserShop" parameterMap="BaseParameterMap"
		resultMap="BaseResultMap">
		SELECT
		COUNT(*) AS nums
		FROM SC_USER_SHOP WHERE FK_USER =
		#{USER_ID} AND FK_SHOP=#{SHOP_ID}
	</select>

	<!-- 根据shopId查询未到期的商店购买的服务信息的价格的过期时间 -->
	<select id="selectNODSTAndODByShopId" parameterMap="BaseParameterMap"
		resultMap="BaseResultMap">
		SELECT st.SERVICE_PRICE, si.OVER_DATA
		FROM sc_shop_info si,
		sc_service_type st
		WHERE si.SHOP_ID = #{SHOP_ID} AND si.SERVICETYPE_FK
		= st.SERVICE_PK AND
		si.OVER_DATA > NOW();

	</select>

	<select id="loadShopListByUser" parameterMap="BaseParameterMap"
		resultMap="BaseResultMap">
		SELECT a.FK_SHOP, a.FK_ROLE, a.FK_USER_TAG, b.SHOP_NAME,
		b.IMG_BODAY, b.IMG_HEAD, b.IMG_LOGO, b.SERVICETYPE_FK, b.SHOP_ADDRESS,
		b.SHOP_AREA, b.SHOP_GPS, b.SHOP_HOURS, b.SHOP_REMARK, b.SHOP_STATE,
		b.SHOP_TEL, b.SHOP_TYPE, b.SERVICETYPE_FK, b.SUPPORT, b.OVER_DATA,
		c.FK_APP FROM
		sc_user_shop a LEFT JOIN sc_shop_info b ON a.FK_SHOP =
		b.SHOP_ID
		LEFT JOIN sc_shop_app c ON a.FK_SHOP = c.FK_SHOP
		WHERE
		a.FK_USER = #{USER_PK} AND a.FK_ROLE != '7'
	</select>
	
	<!-- 店员端报表查询管理商铺 -->
	<select id="loadShopSideListByUserUNIONID" parameterMap="BaseParameterMap"
		resultMap="BaseResultMap">
		SELECT s.SHOP_ID,s.SHOP_NAME FROM sc_shop_info s INNER JOIN 
			(select us.FK_SHOP,us.FK_ROLE from sc_user u INNER JOIN sc_user_shop us 
			ON u.USER_PK = us.FK_USER 
			WHERE u.USER_UNIONID = #{unionId}) rs 
		ON s.SHOP_ID = rs.FK_SHOP
			WHERE rs.FK_ROLE != 7
	</select>
	
	<!-- 根据商铺ID查询该商铺的抹零规则 -->
	<select id="selectMoLingByShopPK" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT m.FK_SHOP,m.SHOP_MOLING_PK,
			m.SHOP_MOLING_VALUE,m.SHOP_MOLING_TEXT 
		FROM sc_shop_moling m 
		WHERE m.FK_SHOP = #{FK_SHOP}
	</select>
	<!-- 根据商铺Id和时间查询新增会员个数 -->
	<select id="selectNewAddMemberNumberByTime" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		select count(*) AS VIP_NUMBER from sc_shop_vcard v inner join sc_user_vcard uv
		on v.VIP_CARD_FK = uv.VCARD_FK
		where v.SHOP_FK = #{FK_SHOP}
		and str_to_date(uv.CREATE_TIME,'%Y-%m-%d%H:%i')
		between str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
		and str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 根据商铺Id和时间查询店内订单个数 -->
	<select id="selectShopOrderNumberByTimeAndShopId" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		select count(o.ORDER_PK) as SHOPINNER_ORDERNUMBER from sc_order o 
			where o.FK_SHOP = #{FK_SHOP}
			and o.ORDER_DIVISION = #{ORDER_DIVISION}
			and str_to_date(o.CREATE_TIME,'%Y-%m-%d%H:%i')
					between str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
					and str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 查询饿百订单个数 -->
	<select id="selectShopOutOrderNumberByTimeAndShopId" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT COUNT(b.ORDER_PK) AS OUTORDER_NUMBER FROM sc_waimai_eb_order b
		WHERE b.SHOP_BAIDU_ID = (
			SELECT s.EB_SHOP_ID FROM sc_shop_info s
			WHERE s.SHOP_ID = #{FK_SHOP}
		)
		AND  str_to_date(b.CREATE_TIME,'%Y-%m-%d%H:%i')
				BETWEEN str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
				AND str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 查询产生或消费的积分 -->
	<select id="selectShopJFSUMByShopAndTime" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT SUM(vr.VRECORD_NUM) AS SUM_JF FROM sc_vip_card v INNER JOIN sc_vcard_record vr
		ON v.VCARD_PK = vr.VCARD_FK
		WHERE v.USE_SHOP  LIKE '%${FK_SHOP}%'
		AND vr.VRECORD_TYPE = #{TYPE}
		AND str_to_date(vr.CREATE_TIME,'%Y-%m-%d%H:%i')
				BETWEEN str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
				AND str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 统计店内订单各支付方式的分别数量 -->
	<select id="selectOrderNumberByPayWay" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT COUNT(o.ORDER_PK) AS ORDER_NUMBER FROM sc_order o
		WHERE o.FK_SHOP = #{FK_SHOP}
		AND o.ORDER_PAY_WAY = #{PAY_WAY}
		AND o.ORDER_DIVISION = '0'
		AND str_to_date(o.CREATE_TIME,'%Y-%m-%d%H:%i')
				BETWEEN str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
				AND str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 统计店内订单各支付方式的分别总金额-->
	<select id="selectOrderMoneyByPayWay" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT SUM(o.ORDER_SHOPMONEY) AS SUM_MONEY FROM sc_order o
		WHERE o.FK_SHOP = #{FK_SHOP}
		AND o.ORDER_PAY_WAY = #{PAY_WAY}
		AND o.ORDER_DIVISION = '0'
		AND str_to_date(o.CREATE_TIME,'%Y-%m-%d%H:%i')
				BETWEEN str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
				AND str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
	</select>
	<!-- 根据商铺Id查询该店的店员角色的用户名称和ID -->
	<select id="selectOperatorsByShop" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT u.USER_PK,u.USER_NAME,u.USER_SN FROM sc_user_shop s 
		INNER JOIN sc_user u
		ON s.FK_USER = u.USER_PK
		WHERE s.FK_ROLE = (
			SELECT r.ROLE_PK FROM sc_sys_role r
			WHERE r.ROLE_NAME = '店员'
		)
		AND s.FK_SHOP = #{FK_SHOP}
	</select>
	<!-- 根据时间、商铺ID、操作员加载商铺统计数据 -->
	<select id="selectGoodsDataByTime" parameterMap="BaseParameterMap" resultMap="BaseResultMap">
		SELECT od.ORDER_DETAILS_GNAME,SUM(od.ORDER_DETAILS_FS) AS TOTAL_FS,
			od.ORDER_DETAILS_GMONEY,
		SUM((od.ORDER_DETAILS_FS*od.ORDER_DETAILS_GMONEY))AS TOTAL_MONEY 
		FROM sc_order o 
		INNER JOIN sc_order_details od
		ON o.ORDER_PK = od.FK_ORDER
		WHERE o.ORDER_PAY_STATE = '1'
		AND o.ORDER_DIVISION = #{ORDER_DIVISION}
		<if test='FK_USER != null and FK_USER!=""'>
           AND o.FK_USER = #{FK_USER}
        </if>
		AND o.FK_SHOP = #{FK_SHOP}
		AND str_to_date(o.CREATE_TIME,'%Y-%m-%d%H:%i')
						BETWEEN str_to_date(#{START_TIME},'%Y-%m-%d %H:%i')
						AND str_to_date(#{END_TIME},'%Y-%m-%d %H:%i')
		GROUP BY od.FK_GOODS
	</select>
	
 
	
</mapper>